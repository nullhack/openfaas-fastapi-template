{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml docs/ index.md","title":"Welcome to MkDocs"},{"location":"index.html#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"index.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index.html#project-layout","text":"mkdocs.yml docs/ index.md","title":"Project layout"},{"location":"readme.html","text":"openfaas-fastapi-template Python template for OpenFAAS functions using FastAPI Explore the docs \u00bb Report Bug \u00b7 Request Feature Table of Contents About The Project Getting Started Prerequisites Installation Usage Roadmap Contributing License Contact Acknowledgments About The Project Python template for OpenFAAS functions using FastAPI ( back to top ) Getting Started To run this project locally, you will need to install the prerequisites and follow the installation section. Prerequisites This Project depends on the following projects. * Poetry sh pip install --user --upgrade poetry Poe the Poet sh pip install --user --upgrade poethepoet Installation Clone the repo sh git clone https://github.com/nullhack/openfaas-fastapi-template cd openfaas-fastapi-template Install Poe the Poet and Poetry sh pip install --user --upgrade poethepoet poetry Install requirements for development sh poe install-dev Run tests sh poe test ( back to top ) Usage Some useful examples of how this project can be used: Install requirements sh poe install-dev Run tests sh poe test Generate API documentation sh poe doc Build a docker image for tests sh poe docker-build --target test --build-tag 3.10-alpine docker run -ti --rm handler:test-3.10-alpine Build a docker image to run the root files only without running any test sh poe docker-build --target prod --build-tag 3.10-alpine --no-test docker run -ti --rm handler:prod-3.10-alpine For more examples, please refer to the Documentation ( back to top ) Roadmap [x] Add tests [x] Add code coverage [x] Improve documentation [x] Include more tests [ ] Make the template more generic See the open issues for a full list of proposed features (and known issues). ( back to top ) Contributing Any contributions you make are greatly appreciated . If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\". Don't forget to give the project a star! Thanks again! Fork the Project Create your Feature Branch ( git checkout -b feature/AmazingFeature ) Commit your Changes ( git commit -m 'Add some AmazingFeature' ) Push to the Branch ( git push origin feature/AmazingFeature ) Open a Pull Request ( back to top ) Contact Eric Lopes - @nullhack - nullhack@users.noreply.github.com Project Link: https://github.com/nullhack/openfaas-fastapi-template/ ( back to top ) Acknowledgments This project was created using cookiecutter and nullhack's python-project-template: nullhack's python-project-template ( back to top ) License Distributed under the MIT License. See LICENSE for more information. ( back to top )","title":"Readme"},{"location":"readme.html#about-the-project","text":"Python template for OpenFAAS functions using FastAPI ( back to top )","title":"About The Project"},{"location":"readme.html#getting-started","text":"To run this project locally, you will need to install the prerequisites and follow the installation section.","title":"Getting Started"},{"location":"readme.html#prerequisites","text":"This Project depends on the following projects. * Poetry sh pip install --user --upgrade poetry Poe the Poet sh pip install --user --upgrade poethepoet","title":"Prerequisites"},{"location":"readme.html#installation","text":"Clone the repo sh git clone https://github.com/nullhack/openfaas-fastapi-template cd openfaas-fastapi-template Install Poe the Poet and Poetry sh pip install --user --upgrade poethepoet poetry Install requirements for development sh poe install-dev Run tests sh poe test ( back to top )","title":"Installation"},{"location":"readme.html#usage","text":"Some useful examples of how this project can be used: Install requirements sh poe install-dev Run tests sh poe test Generate API documentation sh poe doc Build a docker image for tests sh poe docker-build --target test --build-tag 3.10-alpine docker run -ti --rm handler:test-3.10-alpine Build a docker image to run the root files only without running any test sh poe docker-build --target prod --build-tag 3.10-alpine --no-test docker run -ti --rm handler:prod-3.10-alpine For more examples, please refer to the Documentation ( back to top )","title":"Usage"},{"location":"readme.html#roadmap","text":"[x] Add tests [x] Add code coverage [x] Improve documentation [x] Include more tests [ ] Make the template more generic See the open issues for a full list of proposed features (and known issues). ( back to top )","title":"Roadmap"},{"location":"readme.html#contributing","text":"Any contributions you make are greatly appreciated . If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\". Don't forget to give the project a star! Thanks again! Fork the Project Create your Feature Branch ( git checkout -b feature/AmazingFeature ) Commit your Changes ( git commit -m 'Add some AmazingFeature' ) Push to the Branch ( git push origin feature/AmazingFeature ) Open a Pull Request ( back to top )","title":"Contributing"},{"location":"readme.html#contact","text":"Eric Lopes - @nullhack - nullhack@users.noreply.github.com Project Link: https://github.com/nullhack/openfaas-fastapi-template/ ( back to top )","title":"Contact"},{"location":"readme.html#acknowledgments","text":"This project was created using cookiecutter and nullhack's python-project-template: nullhack's python-project-template ( back to top )","title":"Acknowledgments"},{"location":"readme.html#license","text":"Distributed under the MIT License. See LICENSE for more information. ( back to top )","title":"License"},{"location":"api/handler.handler.html","text":"module handler . handler </> This module defines how requests are handled by the server. Functions check_auth ( login_data ) (bool) \u2014 Checks the user login. </> handle ( req , auth_token ) (dict) \u2014 Handle a request to the function. </> function handler.handler . check_auth ( login_data ) </> Checks the user login. Parameters login_data (UserLoginSchema) \u2014 User login data. Returns (bool) True if the login is correct and False if it is not. function handler.handler . handle ( req , auth_token=None ) </> Handle a request to the function. Parameters req (dict) \u2014 The request parameters. auth_token (dict) \u2014 The token information used to authenticate. Returns (dict) A dictionary containing the results for the request.","title":"handler.handler"},{"location":"api/handler.handler.html#handlerhandler","text":"</> This module defines how requests are handled by the server. Functions check_auth ( login_data ) (bool) \u2014 Checks the user login. </> handle ( req , auth_token ) (dict) \u2014 Handle a request to the function. </> function","title":"handler.handler"},{"location":"api/handler.handler.html#handlerhandlercheck_auth","text":"</> Checks the user login. Parameters login_data (UserLoginSchema) \u2014 User login data. Returns (bool) True if the login is correct and False if it is not. function","title":"handler.handler.check_auth"},{"location":"api/handler.handler.html#handlerhandlerhandle","text":"</> Handle a request to the function. Parameters req (dict) \u2014 The request parameters. auth_token (dict) \u2014 The token information used to authenticate. Returns (dict) A dictionary containing the results for the request.","title":"handler.handler.handle"},{"location":"api/handler.html","text":"package handler </> Handler module. module handler . handler </> This module defines how requests are handled by the server. Functions check_auth ( login_data ) (bool) \u2014 Checks the user login. </> handle ( req , auth_token ) (dict) \u2014 Handle a request to the function. </> package handler . server </> Server module.","title":"handler"},{"location":"api/handler.html#handler","text":"</> Handler module. module","title":"handler"},{"location":"api/handler.html#handlerhandler","text":"</> This module defines how requests are handled by the server. Functions check_auth ( login_data ) (bool) \u2014 Checks the user login. </> handle ( req , auth_token ) (dict) \u2014 Handle a request to the function. </> package","title":"handler.handler"},{"location":"api/handler.html#handlerserver","text":"</> Server module.","title":"handler.server"},{"location":"api/handler.server.api.html","text":"module handler.server . api </> Defines how the API will handle requests. Functions handle_request ( req_model , request ) (dict) \u2014 Defines actions to be taken when a post request is made to the root page. </> read_root ( request ) (dict) \u2014 Defines actions to be taken when a get request is made to the root page. </> run ( ) \u2014 Run the server. </> swagger_ui_html ( ) (HTMLResponse) \u2014 Returns a swagger html. </> user_login ( user ) (dict) \u2014 Returns a JWE if the user is authenticated. </> function handler.server.api . swagger_ui_html ( ) </> Returns a swagger html. Returns (HTMLResponse) A HTMLResponse containing the UI specified in the OpenAPI specification. function handler.server.api . user_login ( user=Body(PydanticUndefined) ) </> Returns a JWE if the user is authenticated. Parameters user (UserLoginSchema) \u2014 User login object. Returns (dict) A JWE response signed. Raises HTTPException \u2014 If user fails to authenticate. function handler.server.api . read_root ( request ) </> Defines actions to be taken when a get request is made to the root page. Parameters request (Request) \u2014 User request object. Returns (dict) Dictionary containing the request parameters. function handler.server.api . handle_request ( req_model , request ) </> Defines actions to be taken when a post request is made to the root page. Parameters req_model (RequestModel) \u2014 User request object. request (Request) \u2014 FastAPI request object. Returns (dict) Dictionary containing the response. Raises HTTPException \u2014 When the handler raises any Exception. function handler.server.api . run ( ) </> Run the server.","title":"handler.server.api"},{"location":"api/handler.server.api.html#handlerserverapi","text":"</> Defines how the API will handle requests. Functions handle_request ( req_model , request ) (dict) \u2014 Defines actions to be taken when a post request is made to the root page. </> read_root ( request ) (dict) \u2014 Defines actions to be taken when a get request is made to the root page. </> run ( ) \u2014 Run the server. </> swagger_ui_html ( ) (HTMLResponse) \u2014 Returns a swagger html. </> user_login ( user ) (dict) \u2014 Returns a JWE if the user is authenticated. </> function","title":"handler.server.api"},{"location":"api/handler.server.api.html#handlerserverapiswagger_ui_html","text":"</> Returns a swagger html. Returns (HTMLResponse) A HTMLResponse containing the UI specified in the OpenAPI specification. function","title":"handler.server.api.swagger_ui_html"},{"location":"api/handler.server.api.html#handlerserverapiuser_login","text":"</> Returns a JWE if the user is authenticated. Parameters user (UserLoginSchema) \u2014 User login object. Returns (dict) A JWE response signed. Raises HTTPException \u2014 If user fails to authenticate. function","title":"handler.server.api.user_login"},{"location":"api/handler.server.api.html#handlerserverapiread_root","text":"</> Defines actions to be taken when a get request is made to the root page. Parameters request (Request) \u2014 User request object. Returns (dict) Dictionary containing the request parameters. function","title":"handler.server.api.read_root"},{"location":"api/handler.server.api.html#handlerserverapihandle_request","text":"</> Defines actions to be taken when a post request is made to the root page. Parameters req_model (RequestModel) \u2014 User request object. request (Request) \u2014 FastAPI request object. Returns (dict) Dictionary containing the response. Raises HTTPException \u2014 When the handler raises any Exception. function","title":"handler.server.api.handle_request"},{"location":"api/handler.server.api.html#handlerserverapirun","text":"</> Run the server.","title":"handler.server.api.run"},{"location":"api/handler.server.auth.auth_bearer.html","text":"module handler.server.auth . auth_bearer </> A module to bear JWE tokens. This module is responsible for defining a JWE beared classs to be used in fastapi. Classes JWEBearer \u2014 A class to define a JWE Token Bearer. </> class handler.server.auth.auth_bearer . JWEBearer ( auto_error=True ) </> Bases fastapi.security.http.HTTPBearer fastapi.security.http.HTTPBase fastapi.security.base.SecurityBase A class to define a JWE Token Bearer. Methods __call__ ( request ) (str) \u2014 Define behaviour when the class is called. </> verify_jwe ( jwe_token ) (bool) \u2014 Verify a JWE token. </> method __call__ ( request ) </> Define behaviour when the class is called. Parameters request (Request) \u2014 The request to be checked. Returns (str) A credential if it's valid. Raises HTTPException \u2014 If there's any issue with the credentials. method verify_jwe ( jwe_token ) </> Verify a JWE token. Parameters jwe_token (str) \u2014 JWE token to be verified. Returns (bool) A boolean showing if the token is valid or not.","title":"handler.server.auth.auth_bearer"},{"location":"api/handler.server.auth.auth_bearer.html#handlerserverauthauth_bearer","text":"</> A module to bear JWE tokens. This module is responsible for defining a JWE beared classs to be used in fastapi. Classes JWEBearer \u2014 A class to define a JWE Token Bearer. </> class","title":"handler.server.auth.auth_bearer"},{"location":"api/handler.server.auth.auth_bearer.html#handlerserverauthauth_bearerjwebearer","text":"</> Bases fastapi.security.http.HTTPBearer fastapi.security.http.HTTPBase fastapi.security.base.SecurityBase A class to define a JWE Token Bearer. Methods __call__ ( request ) (str) \u2014 Define behaviour when the class is called. </> verify_jwe ( jwe_token ) (bool) \u2014 Verify a JWE token. </> method","title":"handler.server.auth.auth_bearer.JWEBearer"},{"location":"api/handler.server.auth.auth_bearer.html#handlerserverauthauth_bearerjwebearercall","text":"</> Define behaviour when the class is called. Parameters request (Request) \u2014 The request to be checked. Returns (str) A credential if it's valid. Raises HTTPException \u2014 If there's any issue with the credentials. method","title":"handler.server.auth.auth_bearer.JWEBearer.call"},{"location":"api/handler.server.auth.auth_bearer.html#handlerserverauthauth_bearerjwebearerverify_jwe","text":"</> Verify a JWE token. Parameters jwe_token (str) \u2014 JWE token to be verified. Returns (bool) A boolean showing if the token is valid or not.","title":"handler.server.auth.auth_bearer.JWEBearer.verify_jwe"},{"location":"api/handler.server.auth.auth_handler.html","text":"module handler.server.auth . auth_handler </> A module to handle tokens. This module is responsible for token responses, signing and decoding. For more control on JWE duration, you can set JWE_SECRET with your own secret. Functions decrypt_jwe ( token ) (dict) \u2014 Decode the token. </> encrypt_jwe ( expiry_seconds , **token_attrs ) (dict) \u2014 Sign a paylod and return the signed token. </> token_response ( token ) (dict) \u2014 Returns a token response for a given token. </> function handler.server.auth.auth_handler . token_response ( token ) </> Returns a token response for a given token. Parameters token (str) \u2014 The token to be used. Returns (dict) A dict with the access token. function handler.server.auth.auth_handler . encrypt_jwe ( expiry_seconds=86400 , **token_attrs ) </> Sign a paylod and return the signed token. Parameters expiry_seconds (int) \u2014 Amount of seconds before expire. token_attrs (dict) \u2014 Attributes to be encrypted with the token. Returns (dict) A token with the signed payload. function handler.server.auth.auth_handler . decrypt_jwe ( token ) </> Decode the token. Parameters token (str) \u2014 The token to be decodded. Returns (dict) The decoded token if possible to decode, or else an empty dict.","title":"handler.server.auth.auth_handler"},{"location":"api/handler.server.auth.auth_handler.html#handlerserverauthauth_handler","text":"</> A module to handle tokens. This module is responsible for token responses, signing and decoding. For more control on JWE duration, you can set JWE_SECRET with your own secret. Functions decrypt_jwe ( token ) (dict) \u2014 Decode the token. </> encrypt_jwe ( expiry_seconds , **token_attrs ) (dict) \u2014 Sign a paylod and return the signed token. </> token_response ( token ) (dict) \u2014 Returns a token response for a given token. </> function","title":"handler.server.auth.auth_handler"},{"location":"api/handler.server.auth.auth_handler.html#handlerserverauthauth_handlertoken_response","text":"</> Returns a token response for a given token. Parameters token (str) \u2014 The token to be used. Returns (dict) A dict with the access token. function","title":"handler.server.auth.auth_handler.token_response"},{"location":"api/handler.server.auth.auth_handler.html#handlerserverauthauth_handlerencrypt_jwe","text":"</> Sign a paylod and return the signed token. Parameters expiry_seconds (int) \u2014 Amount of seconds before expire. token_attrs (dict) \u2014 Attributes to be encrypted with the token. Returns (dict) A token with the signed payload. function","title":"handler.server.auth.auth_handler.encrypt_jwe"},{"location":"api/handler.server.auth.auth_handler.html#handlerserverauthauth_handlerdecrypt_jwe","text":"</> Decode the token. Parameters token (str) \u2014 The token to be decodded. Returns (dict) The decoded token if possible to decode, or else an empty dict.","title":"handler.server.auth.auth_handler.decrypt_jwe"},{"location":"api/handler.server.auth.html","text":"package handler.server . auth </> Auth module. module handler.server.auth . auth_handler </> A module to handle tokens. This module is responsible for token responses, signing and decoding. For more control on JWE duration, you can set JWE_SECRET with your own secret. Functions decrypt_jwe ( token ) (dict) \u2014 Decode the token. </> encrypt_jwe ( expiry_seconds , **token_attrs ) (dict) \u2014 Sign a paylod and return the signed token. </> token_response ( token ) (dict) \u2014 Returns a token response for a given token. </> module handler.server.auth . auth_bearer </> A module to bear JWE tokens. This module is responsible for defining a JWE beared classs to be used in fastapi. Classes JWEBearer \u2014 A class to define a JWE Token Bearer. </>","title":"handler.server.auth"},{"location":"api/handler.server.auth.html#handlerserverauth","text":"</> Auth module. module","title":"handler.server.auth"},{"location":"api/handler.server.auth.html#handlerserverauthauth_handler","text":"</> A module to handle tokens. This module is responsible for token responses, signing and decoding. For more control on JWE duration, you can set JWE_SECRET with your own secret. Functions decrypt_jwe ( token ) (dict) \u2014 Decode the token. </> encrypt_jwe ( expiry_seconds , **token_attrs ) (dict) \u2014 Sign a paylod and return the signed token. </> token_response ( token ) (dict) \u2014 Returns a token response for a given token. </> module","title":"handler.server.auth.auth_handler"},{"location":"api/handler.server.auth.html#handlerserverauthauth_bearer","text":"</> A module to bear JWE tokens. This module is responsible for defining a JWE beared classs to be used in fastapi. Classes JWEBearer \u2014 A class to define a JWE Token Bearer. </>","title":"handler.server.auth.auth_bearer"},{"location":"api/handler.server.html","text":"package handler . server </> Server module. module handler.server . model </> This module defines models used by FastAPI. Classes RequestModel \u2014 Define a request model. </> ResponseModel \u2014 Define a response model. </> UserLoginSchema \u2014 Define a user login schema. </> module handler.server . api </> Defines how the API will handle requests. Functions handle_request ( req_model , request ) (dict) \u2014 Defines actions to be taken when a post request is made to the root page. </> read_root ( request ) (dict) \u2014 Defines actions to be taken when a get request is made to the root page. </> run ( ) \u2014 Run the server. </> swagger_ui_html ( ) (HTMLResponse) \u2014 Returns a swagger html. </> user_login ( user ) (dict) \u2014 Returns a JWE if the user is authenticated. </> package handler.server . auth </> Auth module. package handler.server . utils </> Utils scripts module.","title":"handler.server"},{"location":"api/handler.server.html#handlerserver","text":"</> Server module. module","title":"handler.server"},{"location":"api/handler.server.html#handlerservermodel","text":"</> This module defines models used by FastAPI. Classes RequestModel \u2014 Define a request model. </> ResponseModel \u2014 Define a response model. </> UserLoginSchema \u2014 Define a user login schema. </> module","title":"handler.server.model"},{"location":"api/handler.server.html#handlerserverapi","text":"</> Defines how the API will handle requests. Functions handle_request ( req_model , request ) (dict) \u2014 Defines actions to be taken when a post request is made to the root page. </> read_root ( request ) (dict) \u2014 Defines actions to be taken when a get request is made to the root page. </> run ( ) \u2014 Run the server. </> swagger_ui_html ( ) (HTMLResponse) \u2014 Returns a swagger html. </> user_login ( user ) (dict) \u2014 Returns a JWE if the user is authenticated. </> package","title":"handler.server.api"},{"location":"api/handler.server.html#handlerserverauth","text":"</> Auth module. package","title":"handler.server.auth"},{"location":"api/handler.server.html#handlerserverutils","text":"</> Utils scripts module.","title":"handler.server.utils"},{"location":"api/handler.server.model.html","text":"module handler.server . model </> This module defines models used by FastAPI. Classes RequestModel \u2014 Define a request model. </> ResponseModel \u2014 Define a response model. </> UserLoginSchema \u2014 Define a user login schema. </> class handler.server.model . RequestModel ( data ) </> Bases pydantic.main.BaseModel pydantic.utils.Representation Define a request model. class handler.server.model . ResponseModel ( data ) </> Bases pydantic.main.BaseModel pydantic.utils.Representation Define a response model. class handler.server.model . UserLoginSchema ( user_id , password ) </> Bases pydantic.main.BaseModel pydantic.utils.Representation Define a user login schema. Classes Config \u2014 Configure extra configurations to show default example of login. </> Config \u2014 Configure extra configurations to show default example of login. </> class handler.server.model . Config ( ) </> Bases handler.server.model.UserLoginSchema.Config pydantic.config.BaseConfig Configure extra configurations to show default example of login. class Config ( ) </> Configure extra configurations to show default example of login.","title":"handler.server.model"},{"location":"api/handler.server.model.html#handlerservermodel","text":"</> This module defines models used by FastAPI. Classes RequestModel \u2014 Define a request model. </> ResponseModel \u2014 Define a response model. </> UserLoginSchema \u2014 Define a user login schema. </> class","title":"handler.server.model"},{"location":"api/handler.server.model.html#handlerservermodelrequestmodel","text":"</> Bases pydantic.main.BaseModel pydantic.utils.Representation Define a request model. class","title":"handler.server.model.RequestModel"},{"location":"api/handler.server.model.html#handlerservermodelresponsemodel","text":"</> Bases pydantic.main.BaseModel pydantic.utils.Representation Define a response model. class","title":"handler.server.model.ResponseModel"},{"location":"api/handler.server.model.html#handlerservermodeluserloginschema","text":"</> Bases pydantic.main.BaseModel pydantic.utils.Representation Define a user login schema. Classes Config \u2014 Configure extra configurations to show default example of login. </> Config \u2014 Configure extra configurations to show default example of login. </> class","title":"handler.server.model.UserLoginSchema"},{"location":"api/handler.server.model.html#handlerservermodelconfig","text":"</> Bases handler.server.model.UserLoginSchema.Config pydantic.config.BaseConfig Configure extra configurations to show default example of login. class","title":"handler.server.model.Config"},{"location":"api/handler.server.model.html#handlerservermodeluserloginschemaconfig","text":"</> Configure extra configurations to show default example of login.","title":"handler.server.model.UserLoginSchema.Config"},{"location":"api/handler.server.utils.html","text":"package handler.server . utils </> Utils scripts module. module handler.server.utils . swagger </> This module provides scripts tto help generate swagger documentation. Functions get_swagger_ui_html ( openapi_spec , title , swagger_js_url , swagger_css_url , swagger_favicon_url ) (HTMLResponse) \u2014 A tweaked on fastapi.openapi.docs.get_swagger_ui_html to generate from raw JSON as opposed to using a url. </>","title":"handler.server.utils"},{"location":"api/handler.server.utils.html#handlerserverutils","text":"</> Utils scripts module. module","title":"handler.server.utils"},{"location":"api/handler.server.utils.html#handlerserverutilsswagger","text":"</> This module provides scripts tto help generate swagger documentation. Functions get_swagger_ui_html ( openapi_spec , title , swagger_js_url , swagger_css_url , swagger_favicon_url ) (HTMLResponse) \u2014 A tweaked on fastapi.openapi.docs.get_swagger_ui_html to generate from raw JSON as opposed to using a url. </>","title":"handler.server.utils.swagger"},{"location":"api/handler.server.utils.swagger.html","text":"module handler.server.utils . swagger </> This module provides scripts tto help generate swagger documentation. Functions get_swagger_ui_html ( openapi_spec , title , swagger_js_url , swagger_css_url , swagger_favicon_url ) (HTMLResponse) \u2014 A tweaked on fastapi.openapi.docs.get_swagger_ui_html to generate from raw JSON as opposed to using a url. </> function handler.server.utils.swagger . get_swagger_ui_html ( openapi_spec , title , swagger_js_url='https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui-bundle.js' , swagger_css_url='https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui.css' , swagger_favicon_url='https://raw.githubusercontent.com/openfaas/docs/master/docs/images/favicon.ico' ) </> A tweaked on fastapi.openapi.docs.get_swagger_ui_html to generate from raw JSON as opposed to using a url. Parameters openapi_spec (str) \u2014 OpenAPI speficication JSON encoded as string. title (str) \u2014 Title of the page. swagger_js_url (str) \u2014 Custom Javascript URL. swagger_css_url (str) \u2014 Custom CSS URL. swagger_favicon_url (str) \u2014 Custom favicon URL. Returns (HTMLResponse) Renderized documentation page as HTML.","title":"handler.server.utils.swagger"},{"location":"api/handler.server.utils.swagger.html#handlerserverutilsswagger","text":"</> This module provides scripts tto help generate swagger documentation. Functions get_swagger_ui_html ( openapi_spec , title , swagger_js_url , swagger_css_url , swagger_favicon_url ) (HTMLResponse) \u2014 A tweaked on fastapi.openapi.docs.get_swagger_ui_html to generate from raw JSON as opposed to using a url. </> function","title":"handler.server.utils.swagger"},{"location":"api/handler.server.utils.swagger.html#handlerserverutilsswaggerget_swagger_ui_html","text":"</> A tweaked on fastapi.openapi.docs.get_swagger_ui_html to generate from raw JSON as opposed to using a url. Parameters openapi_spec (str) \u2014 OpenAPI speficication JSON encoded as string. title (str) \u2014 Title of the page. swagger_js_url (str) \u2014 Custom Javascript URL. swagger_css_url (str) \u2014 Custom CSS URL. swagger_favicon_url (str) \u2014 Custom favicon URL. Returns (HTMLResponse) Renderized documentation page as HTML.","title":"handler.server.utils.swagger.get_swagger_ui_html"},{"location":"api/source/handler.handler.html","text":"SOURCE CODE handler. handler DOCS \"\"\"This module defines how requests are handled by the server.\"\"\" from .server.model import UserLoginSchema def check_auth ( login_data : UserLoginSchema ) -> bool : DOCS \"\"\"Checks the user login. Arguments: login_data (UserLoginSchema): User login data. Returns: True if the login is correct and False if it is not. \"\"\" # To improve authentication rules change the line below! check = bool ( login_data . user_id and login_data . password ) return check def handle ( req : dict , auth_token : dict = None ) -> dict : DOCS \"\"\"Handle a request to the function. Args: req (dict): The request parameters. auth_token (dict): The token information used to authenticate. Returns: A dictionary containing the results for the request. \"\"\" return { \"req\" : req , \"auth_token\" : auth_token }","title":"handler.handler"},{"location":"api/source/handler.html","text":"SOURCE CODE handler DOCS \"\"\"Handler module.\"\"\"","title":"handler"},{"location":"api/source/handler.server.api.html","text":"SOURCE CODE handler.server. api DOCS \"\"\"Defines how the API will handle requests.\"\"\" import json import os from fastapi import Body , Depends , FastAPI , HTTPException , Request from starlette import status from starlette.responses import HTMLResponse from .. import handler from .auth.auth_bearer import JWEBearer from .auth.auth_handler import decrypt_jwe , encrypt_jwe from .model import RequestModel , ResponseModel , UserLoginSchema from .utils.swagger import get_swagger_ui_html func_name = os . getenv ( \"FUNCNAME\" , \"\" ) app = FastAPI ( docs_url = None , redoc_url = None , servers = [ { \"url\" : \"/\" }, { \"url\" : f \"/function/ { func_name } \" }, ], ) body = Body () @app . get ( DOCS \"/docs\" , response_class = HTMLResponse , description = \"Swagger UI HTML.\" , include_in_schema = False , ) async def swagger_ui_html () -> HTMLResponse : \"\"\"Returns a swagger html. Returns: A HTMLResponse containing the UI specified in the OpenAPI specification. \"\"\" openapi_html = get_swagger_ui_html ( openapi_spec = json . dumps ( app . openapi ()), title = f \"OpenFaas function: { func_name } \" , ) return openapi_html @app . post ( \"/auth\" , tags = [ \"Auth\" ], description = \"User login.\" ) DOCS async def user_login ( user : UserLoginSchema = body ) -> dict : \"\"\"Returns a JWE if the user is authenticated. Arguments: user (UserLoginSchema): User login object. Returns: A JWE response signed. Raises: HTTPException: If user fails to authenticate. \"\"\" jwe_response = {} if handler . check_auth ( user ): jwe_response = encrypt_jwe ( iss = func_name ) else : raise HTTPException ( status_code = 403 , detail = \"Wrong credentials\" ) return jwe_response @app . get ( \"/\" , tags = [ \"Request\" ], description = \"Read root.\" ) DOCS @app . post ( \"/\" , tags = [ \"Request\" ], description = \"Read root.\" ) async def read_root ( request : Request ) -> dict : \"\"\"Defines actions to be taken when a get request is made to the root page. Arguments: request (Request): User request object. Returns: Dictionary containing the request parameters. \"\"\" return { \"params\" : request . query_params } @app . post ( DOCS \"/handle\" , status_code = status . HTTP_200_OK , description = \"Handle the request.\" , response_model = ResponseModel , tags = [ \"Request\" ], dependencies = [ Depends ( JWEBearer ())], ) async def handle_request ( * , req_model : RequestModel , request : Request , ) -> dict : \"\"\"Defines actions to be taken when a post request is made to the root page. Arguments: req_model (RequestModel): User request object. request (Request): FastAPI request object. Returns: Dictionary containing the response. Raises: HTTPException: When the handler raises any Exception. \"\"\" try : token = await JWEBearer ()( request ) auth_token = decrypt_jwe ( token ) res = ResponseModel ( data = handler . handle ( req_model . data , auth_token = auth_token ) ) except Exception : # pragma: no cover # This line is to ensure that any unexpected error will be captured # Testing this behavior would introduce hacks in handle, which is not good raise HTTPException ( status_code = 500 , detail = \"An API Error occurred\" ) return res def run () -> None : # pragma: no cover DOCS \"\"\"Run the server.\"\"\" import uvicorn uvicorn . run ( \"handler.server.api:app\" , host = \"127.0.0.1\" , port = 8000 , reload = True ) if __name__ == \"__main__\" : run ()","title":"handler.server.api"},{"location":"api/source/handler.server.auth.auth_bearer.html","text":"SOURCE CODE handler.server.auth. auth_bearer DOCS \"\"\"A module to bear JWE tokens. This module is responsible for defining a JWE beared classs to be used in fastapi. \"\"\" from typing import TypeVar from fastapi import HTTPException , Request from fastapi.security import HTTPAuthorizationCredentials , HTTPBearer from .auth_handler import decrypt_jwe Self = TypeVar ( \"Self\" , bound = \"JWEBearer\" ) class JWEBearer ( HTTPBearer ): DOCS \"\"\"A class to define a JWE Token Bearer.\"\"\" def __init__ ( self : Self , auto_error : bool = True ) -> None : \"\"\"Initialize JWEBearer instances. Arguments: auto_error (bool): define auto error for HTTPBearer. Default `True`. \"\"\" super ( JWEBearer , self ) . __init__ ( auto_error = auto_error ) async def __call__ ( self : Self , request : Request ) -> str : DOCS \"\"\"Define behaviour when the class is called. Arguments: request (Request): The request to be checked. Returns: A credential if it's valid. Raises: HTTPException: If there's any issue with the credentials. \"\"\" credentials : HTTPAuthorizationCredentials = await super ( JWEBearer , self ) . __call__ ( request ) if not self . verify_jwe ( credentials . credentials ): raise HTTPException ( status_code = 403 , detail = \"Invalid token or expired token.\" ) return credentials . credentials def verify_jwe ( self : Self , jwe_token : str ) -> bool : DOCS \"\"\"Verify a JWE token. Arguments: jwe_token (str): JWE token to be verified. Returns: A boolean showing if the token is valid or not. \"\"\" is_token_valid : bool = False try : payload = decrypt_jwe ( jwe_token ) except Exception : payload = {} is_token_valid = bool ( payload ) return is_token_valid","title":"handler.server.auth.auth_bearer"},{"location":"api/source/handler.server.auth.auth_handler.html","text":"SOURCE CODE handler.server.auth. auth_handler DOCS \"\"\"A module to handle tokens. This module is responsible for token responses, signing and decoding. For more control on JWE duration, you can set JWE_SECRET with your own secret. \"\"\" import json import logging import secrets import time from jose import jwe logger = logging . getLogger ( \"token handler\" ) # If you need control over the encryption password, change the line below JWE_SECRET = secrets . token_urlsafe ( 24 ) JWE_ALGORITHM = \"A256KW\" JWE_ENCRYPTION = \"A256GCM\" def token_response ( token : str ) -> dict : DOCS \"\"\"Returns a token response for a given token. Arguments: token (str): The token to be used. Returns: A dict with the access token. \"\"\" return { \"access_token\" : token } def encrypt_jwe ( DOCS expiry_seconds : int = 86400 , ** token_attrs : dict , ) -> dict : \"\"\"Sign a paylod and return the signed token. Arguments: expiry_seconds (int): Amount of seconds before expire. token_attrs (dict): Attributes to be encrypted with the token. Returns: A token with the signed payload. \"\"\" t = time . time () token_attrs = token_attrs | { \"iat\" : t , \"exp\" : t + expiry_seconds } payload = json . dumps ( token_attrs ) token = jwe . encrypt ( payload , JWE_SECRET . encode (), algorithm = JWE_ALGORITHM , encryption = JWE_ENCRYPTION , ) return token_response ( token ) def decrypt_jwe ( token : str ) -> dict : DOCS \"\"\"Decode the token. Arguments: token (str): The token to be decodded. Returns: The decoded token if possible to decode, or else an empty dict. \"\"\" decoded_token = json . loads ( jwe . decrypt ( token , JWE_SECRET . encode ())) return decoded_token if decoded_token [ \"exp\" ] >= time . time () else {}","title":"handler.server.auth.auth_handler"},{"location":"api/source/handler.server.auth.html","text":"SOURCE CODE handler.server. auth DOCS \"\"\"Auth module.\"\"\"","title":"handler.server.auth"},{"location":"api/source/handler.server.html","text":"SOURCE CODE handler. server DOCS \"\"\"Server module.\"\"\"","title":"handler.server"},{"location":"api/source/handler.server.model.html","text":"SOURCE CODE handler.server. model DOCS \"\"\"This module defines models used by FastAPI.\"\"\" from pydantic import BaseModel , Field class RequestModel ( BaseModel ): DOCS \"\"\"Define a request model.\"\"\" data : dict class ResponseModel ( BaseModel ): DOCS \"\"\"Define a response model.\"\"\" data : dict class UserLoginSchema ( BaseModel ): DOCS \"\"\"Define a user login schema.\"\"\" user_id : str = Field ( ... ) password : str = Field ( ... ) class Config : DOCS \"\"\"Configure extra configurations to show default example of login.\"\"\" schema_extra = { \"example\" : { \"user_id\" : \"user_id\" , \"password\" : \"password\" } }","title":"handler.server.model"},{"location":"api/source/handler.server.utils.html","text":"SOURCE CODE handler.server. utils DOCS \"\"\"Utils scripts module.\"\"\"","title":"handler.server.utils"},{"location":"api/source/handler.server.utils.swagger.html","text":"SOURCE CODE handler.server.utils. swagger DOCS \"\"\"This module provides scripts tto help generate swagger documentation.\"\"\" from starlette.responses import HTMLResponse def get_swagger_ui_html ( DOCS * , openapi_spec : str , title : str , swagger_js_url : str = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui-bundle.js\" , swagger_css_url : str = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui.css\" , swagger_favicon_url : str = \"https://raw.githubusercontent.com/openfaas/docs/master/docs/images/favicon.ico\" , ) -> HTMLResponse : \"\"\"A tweaked on fastapi.openapi.docs.get_swagger_ui_html to generate from raw JSON as opposed to using a url. Arguments: openapi_spec (str): OpenAPI speficication JSON encoded as string. title (str): Title of the page. swagger_js_url (str): Custom Javascript URL. swagger_css_url (str): Custom CSS URL. swagger_favicon_url (str): Custom favicon URL. Returns: HTMLResponse: Renderized documentation page as HTML. \"\"\" html = f \"\"\" <!DOCTYPE html> <html> <head> <link type=\"text/css\" rel=\"stylesheet\" href=\" { swagger_css_url } \"> <link rel=\"shortcut icon\" href=\" { swagger_favicon_url } \"> <title> { title } </title> </head> <body> <div id=\"swagger-ui\"> </div> <script src=\" { swagger_js_url } \"></script> <!-- `SwaggerUIBundle` is now available on the page --> <script> const spec = JSON.parse(` { openapi_spec } `) const ui = SwaggerUIBundle( {{ spec: spec, dom_id: '#swagger-ui', presets: [ SwaggerUIBundle.presets.apis, SwaggerUIBundle.SwaggerUIStandalonePreset ], layout: \"BaseLayout\", deepLinking: true }} ) </script> </body> </html> \"\"\" return HTMLResponse ( html )","title":"handler.server.utils.swagger"},{"location":"scenarios/auth.html","text":"Feature: Authentication checks Scenario Outline: An empty credential should always fail Given I input a blank <user_id> or a blank <password> Then check_auth should fail Examples: | user_id | password | | a | a | | my_user | a | | a | my_pass |","title":"Auth"},{"location":"scenarios/auth.html#feature-authentication-checks","text":"","title":"Feature: Authentication checks"},{"location":"scenarios/auth.html#scenario-outline-an-empty-credential-should-always-fail","text":"Given I input a blank <user_id> or a blank <password> Then check_auth should fail Examples: | user_id | password | | a | a | | my_user | a | | a | my_pass |","title":"Scenario Outline: An empty credential should always fail"},{"location":"scenarios/handler.html","text":"Feature: Handler basic checks. As a simple rule, for any input, the handler must return a dict. So we can intergrate with other tools. Scenario: Basic output Given an input to the handler Then the output of the handler must be of type dict","title":"Handler"},{"location":"scenarios/handler.html#feature-handler-basic-checks","text":"As a simple rule, for any input, the handler must return a dict. So we can intergrate with other tools.","title":"Feature: Handler basic checks."},{"location":"scenarios/handler.html#scenario-basic-output","text":"Given an input to the handler Then the output of the handler must be of type dict","title":"Scenario: Basic output"},{"location":"tests/tests.app_coverage_test.html","text":"module tests . app_coverage_test </> Coverage test for auth module. Functions test_auth ( user_id , password , status_code ) \u2014 Test valid access token. </> test_docs ( ) \u2014 Test docs generation. </> test_get_root ( ) \u2014 Test root access. </> test_invalid_handle ( authorization , status_code ) \u2014 Test invalid handle and authentication. </> test_valid_handle ( ) \u2014 Test valid handling. </> function tests.app_coverage_test . test_get_root ( ) </> Test root access. function tests.app_coverage_test . test_docs ( ) </> Test docs generation. function tests.app_coverage_test . test_auth ( user_id , password , status_code ) </> Test valid access token. Parameters user_id (str) \u2014 User id used to login. password (str) \u2014 Password used to login. status_code (int) \u2014 Expected status code. function tests.app_coverage_test . test_invalid_handle ( authorization , status_code ) </> Test invalid handle and authentication. Parameters authorization (str) \u2014 Authorization string. status_code (int) \u2014 Expected status code returned. function tests.app_coverage_test . test_valid_handle ( ) </> Test valid handling.","title":"tests.app_coverage_test"},{"location":"tests/tests.app_coverage_test.html#testsapp_coverage_test","text":"</> Coverage test for auth module. Functions test_auth ( user_id , password , status_code ) \u2014 Test valid access token. </> test_docs ( ) \u2014 Test docs generation. </> test_get_root ( ) \u2014 Test root access. </> test_invalid_handle ( authorization , status_code ) \u2014 Test invalid handle and authentication. </> test_valid_handle ( ) \u2014 Test valid handling. </> function","title":"tests.app_coverage_test"},{"location":"tests/tests.app_coverage_test.html#testsapp_coverage_testtest_get_root","text":"</> Test root access. function","title":"tests.app_coverage_test.test_get_root"},{"location":"tests/tests.app_coverage_test.html#testsapp_coverage_testtest_docs","text":"</> Test docs generation. function","title":"tests.app_coverage_test.test_docs"},{"location":"tests/tests.app_coverage_test.html#testsapp_coverage_testtest_auth","text":"</> Test valid access token. Parameters user_id (str) \u2014 User id used to login. password (str) \u2014 Password used to login. status_code (int) \u2014 Expected status code. function","title":"tests.app_coverage_test.test_auth"},{"location":"tests/tests.app_coverage_test.html#testsapp_coverage_testtest_invalid_handle","text":"</> Test invalid handle and authentication. Parameters authorization (str) \u2014 Authorization string. status_code (int) \u2014 Expected status code returned. function","title":"tests.app_coverage_test.test_invalid_handle"},{"location":"tests/tests.app_coverage_test.html#testsapp_coverage_testtest_valid_handle","text":"</> Test valid handling.","title":"tests.app_coverage_test.test_valid_handle"},{"location":"tests/tests.auth_coverage_test.html","text":"module tests . auth_coverage_test </> Coverage test for auth module. Functions test_auth_handler_token_response_output ( ) \u2014 Test if token response has the correct format. </> test_bearer_verify_invalid_jwe ( ) \u2014 Test invalid JWE token. </> test_encrypt_and_decrypt ( ) \u2014 Test if encryption and decryption of token works. </> function tests.auth_coverage_test . test_auth_handler_token_response_output ( ) </> Test if token response has the correct format. function tests.auth_coverage_test . test_encrypt_and_decrypt ( ) </> Test if encryption and decryption of token works. function tests.auth_coverage_test . test_bearer_verify_invalid_jwe ( ) </> Test invalid JWE token.","title":"tests.auth_coverage_test"},{"location":"tests/tests.auth_coverage_test.html#testsauth_coverage_test","text":"</> Coverage test for auth module. Functions test_auth_handler_token_response_output ( ) \u2014 Test if token response has the correct format. </> test_bearer_verify_invalid_jwe ( ) \u2014 Test invalid JWE token. </> test_encrypt_and_decrypt ( ) \u2014 Test if encryption and decryption of token works. </> function","title":"tests.auth_coverage_test"},{"location":"tests/tests.auth_coverage_test.html#testsauth_coverage_testtest_auth_handler_token_response_output","text":"</> Test if token response has the correct format. function","title":"tests.auth_coverage_test.test_auth_handler_token_response_output"},{"location":"tests/tests.auth_coverage_test.html#testsauth_coverage_testtest_encrypt_and_decrypt","text":"</> Test if encryption and decryption of token works. function","title":"tests.auth_coverage_test.test_encrypt_and_decrypt"},{"location":"tests/tests.auth_coverage_test.html#testsauth_coverage_testtest_bearer_verify_invalid_jwe","text":"</> Test invalid JWE token.","title":"tests.auth_coverage_test.test_bearer_verify_invalid_jwe"},{"location":"tests/tests.html","text":"package tests </> Tests module. module tests . utils_coverage_test </> Coverage test for util scripts. Functions test_swagger ( ) \u2014 Check if divide works for expected entries. </> module tests . app_coverage_test </> Coverage test for auth module. Functions test_auth ( user_id , password , status_code ) \u2014 Test valid access token. </> test_docs ( ) \u2014 Test docs generation. </> test_get_root ( ) \u2014 Test root access. </> test_invalid_handle ( authorization , status_code ) \u2014 Test invalid handle and authentication. </> test_valid_handle ( ) \u2014 Test valid handling. </> module tests . auth_coverage_test </> Coverage test for auth module. Functions test_auth_handler_token_response_output ( ) \u2014 Test if token response has the correct format. </> test_bearer_verify_invalid_jwe ( ) \u2014 Test invalid JWE token. </> test_encrypt_and_decrypt ( ) \u2014 Test if encryption and decryption of token works. </>","title":"tests"},{"location":"tests/tests.html#tests","text":"</> Tests module. module","title":"tests"},{"location":"tests/tests.html#testsutils_coverage_test","text":"</> Coverage test for util scripts. Functions test_swagger ( ) \u2014 Check if divide works for expected entries. </> module","title":"tests.utils_coverage_test"},{"location":"tests/tests.html#testsapp_coverage_test","text":"</> Coverage test for auth module. Functions test_auth ( user_id , password , status_code ) \u2014 Test valid access token. </> test_docs ( ) \u2014 Test docs generation. </> test_get_root ( ) \u2014 Test root access. </> test_invalid_handle ( authorization , status_code ) \u2014 Test invalid handle and authentication. </> test_valid_handle ( ) \u2014 Test valid handling. </> module","title":"tests.app_coverage_test"},{"location":"tests/tests.html#testsauth_coverage_test","text":"</> Coverage test for auth module. Functions test_auth_handler_token_response_output ( ) \u2014 Test if token response has the correct format. </> test_bearer_verify_invalid_jwe ( ) \u2014 Test invalid JWE token. </> test_encrypt_and_decrypt ( ) \u2014 Test if encryption and decryption of token works. </>","title":"tests.auth_coverage_test"},{"location":"tests/tests.utils_coverage_test.html","text":"module tests . utils_coverage_test </> Coverage test for util scripts. Functions test_swagger ( ) \u2014 Check if divide works for expected entries. </> function tests.utils_coverage_test . test_swagger ( ) </> Check if divide works for expected entries.","title":"tests.utils_coverage_test"},{"location":"tests/tests.utils_coverage_test.html#testsutils_coverage_test","text":"</> Coverage test for util scripts. Functions test_swagger ( ) \u2014 Check if divide works for expected entries. </> function","title":"tests.utils_coverage_test"},{"location":"tests/tests.utils_coverage_test.html#testsutils_coverage_testtest_swagger","text":"</> Check if divide works for expected entries.","title":"tests.utils_coverage_test.test_swagger"},{"location":"tests/source/tests.app_coverage_test.html","text":"SOURCE CODE tests. app_coverage_test DOCS \"\"\"Coverage test for auth module.\"\"\" import json import pytest from fastapi.testclient import TestClient from handler.server import api client = TestClient ( api . app ) def test_get_root () -> None : DOCS \"\"\"Test root access.\"\"\" response = client . get ( \"/\" ) assert response . status_code == 200 def test_docs () -> None : DOCS \"\"\"Test docs generation.\"\"\" response = client . get ( \"/docs\" ) assert response . status_code == 200 @pytest . mark . parametrize ( DOCS ( \"user_id\" , \"password\" , \"status_code\" ), [ ( \"user_id\" , \"password\" , 200 ), ( \"\" , \"\" , 403 ), ( \"\" , \"password\" , 403 ), ( \"user_id\" , \"\" , 403 ), ], ) def test_auth ( user_id : str , password : str , status_code : int ) -> None : \"\"\"Test valid access token. Arguments: user_id (str): User id used to login. password (str): Password used to login. status_code (int): Expected status code. \"\"\" payload = json . dumps ( { \"user_id\" : user_id , \"password\" : password , } ) response = client . post ( \"/auth\" , data = payload ) assert response . status_code == status_code @pytest . mark . parametrize ( DOCS ( \"authorization\" , \"status_code\" ), [ ( \"\" , 403 ), ( \"Not eyJhbGciOiJB\" , 403 ), ( \"Bearer eyJhbGciOiJB\" , 403 ), ( \"Bearer\" , 403 ), ], ) def test_invalid_handle ( authorization : str , status_code : int ) -> None : \"\"\"Test invalid handle and authentication. Arguments: authorization (str): Authorization string. status_code (int): Expected status code returned. \"\"\" payload = json . dumps ({ \"data\" : \"\" }) header = { \"Authorization\" : authorization , \"accept\" : \"application/json\" , \"Content-Type\" : \"application/json\" , } response = client . post ( \"/handle\" , data = payload , headers = header ) assert response . status_code == status_code def test_valid_handle () -> None : DOCS \"\"\"Test valid handling.\"\"\" payload = json . dumps ( { \"user_id\" : \"user_id\" , \"password\" : \"password\" , } ) response = client . post ( \"/auth\" , data = payload ) assert response . status_code == 200 token = json . loads ( response . _content . decode ())[ \"access_token\" ] payload = json . dumps ({ \"data\" : \"\" }) header = { \"Authorization\" : f \"Bearer { token } \" , \"accept\" : \"application/json\" , \"Content-Type\" : \"application/json\" , } response = client . post ( \"/handle\" , data = payload , headers = header ) assert response . status_code == 200","title":"tests.app_coverage_test"},{"location":"tests/source/tests.auth_coverage_test.html","text":"SOURCE CODE tests. auth_coverage_test DOCS \"\"\"Coverage test for auth module.\"\"\" from handler.server.auth import auth_bearer , auth_handler def test_auth_handler_token_response_output () -> None : DOCS \"\"\"Test if token response has the correct format.\"\"\" token_response = auth_handler . token_response ( \"test\" ) assert token_response == { \"access_token\" : \"test\" } def test_encrypt_and_decrypt () -> None : DOCS \"\"\"Test if encryption and decryption of token works.\"\"\" encrypted_token_response = auth_handler . encrypt_jwe () decrypted_token = auth_handler . decrypt_jwe ( encrypted_token_response [ \"access_token\" ] ) assert isinstance ( decrypted_token , dict ) def test_bearer_verify_invalid_jwe () -> None : DOCS \"\"\"Test invalid JWE token.\"\"\" jwe_bearer = auth_bearer . JWEBearer () assert not jwe_bearer . verify_jwe ( \"Invalid token!\" )","title":"tests.auth_coverage_test"},{"location":"tests/source/tests.html","text":"SOURCE CODE tests DOCS \"\"\"Tests module.\"\"\"","title":"tests"},{"location":"tests/source/tests.utils_coverage_test.html","text":"SOURCE CODE tests. utils_coverage_test DOCS \"\"\"Coverage test for util scripts.\"\"\" from starlette.responses import HTMLResponse from handler.server.utils import swagger def test_swagger () -> None : DOCS \"\"\"Check if divide works for expected entries.\"\"\" html = swagger . get_swagger_ui_html ( openapi_spec = \"\" , title = \"\" , ) assert isinstance ( html , HTMLResponse )","title":"tests.utils_coverage_test"}]}